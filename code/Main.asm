;MAIN PRP
;AHMED MOSLEH

;============================================================
; ========================COMMAN MACORS======================
;============================================================
;THIS MACRO SETS THE CURSOR LOCATION TO ROW,COLUMN
SET_CURSOR MACRO ROW,COLUMN
    MOV AH,02
    MOV BH,00
    MOV DH,ROW
    MOV DL,COLUMN 
    INT 10H
    
ENDM

GET_CURSOR  MACRO PAGE 
    MOV BH,PAGE
    MOV AH,3
    INT 10H
    MOV CURSOR_COL,DL
    MOV CURSOR_ROW,DH

ENDM 


;THIS MACRO CLEARS THE SCREEN
CLEAR_SCREEN MACRO 
    MOV AX,0600H
    MOV BH,07
    MOV CX,0
    MOV DX,184FH
    INT 10H
    
ENDM

;THIS MACRO PRINT MESSAGE ON SPECIFIC LOCATION
;IF LOCATION = 0 DON'T MOVE CURSOR IF EQUAL 1 MOV IT TO ROW AND COLUMN
DISPLAY_MESSAGE MACRO MESS,LOCATION,ROW,COLUMN 
    LOCAL SAMELOCATION
    MOV AX,LOCATION
    CMP AX,0
    JE SAMELOCATION
    SET_CURSOR ROW,COLUMN

    SAMELOCATION:
        MOV AH,9
        MOV DX,OFFSET MESS
        INT 21H    
ENDM

READ_MESSAGE MACRO BUFFER,LOCATION,ROW,COLUMN 
    LOCAL SAMELOCATION
    MOV AX,LOCATION
    CMP AX,0
    JE SAMELOCATION
    SET_CURSOR ROW,COLUMN

    SAMELOCATION:
        MOV AH,0AH
        MOV DX,OFFSET BUFFER
        INT 21H 

ENDM

COMPARE_STRINGS MACRO STR1,STR2,NUM_OF_BYTES
    LEA DI,STR1
    LEA SI,STR2
    MOV CX,NUM_OF_BYTES
    REP CMPSB    
ENDM

SET_VIDEO_MODE MACRO MODE
; TEXT 80X25 ==> AL = 3
; GRAPHICS 320X200 ==> AL = 4
; GRAPHICS 640X200 ==> AL = 6

    MOV AH,00
    MOV AL,MODE
    INT 10H
    
ENDM

DRAW_CHAR MACRO character_to_display,page_number,attribute,number_of_times 
    MOV AL,character_to_display
    MOV BH,page_number
    MOV BL,attribute
    MOV CX,number_of_times
    MOV AH,9
    INT 10H

ENDM

DRAW_PIXEL MACRO COLOR,ROW,COL
    MOV AL,COLOR
    MOV CX,COL
    MOV DX,ROW
    MOV AH,0CH
    INT 10H  
    
ENDM


;============================================================
; ========================MAIN CODE==========================
;============================================================

.MODEL HUGE
.STACK 64

;================================
;============DATA================
;================================
.DATA

MESS1 DB "Please enter command",10,13,"$"
COMMAND_BUFFER LABEL BYTE
COMMAND_BUFFER_SIZE DB 20
COMMAND_BUFFER_ACTUAL_SIZE DB ?
COMMAND_BUFFER_INSTRUCTION DB 4 DUP("$")
COMMAND_BUFFER_DEST DB 5 DUP("$")
COMMAND_BUFFER_SOURCE DB 5 DUP("$")
DEST DB 5 DUP("$")
SOURCE DB 5 DUP("$")

;============COMMANDS================
IS_ADD  DB "add ",'$' 
IS_ADC  DB "adc "
IS_SUB  DB 'sub ','$'
IS_SBB  DB 'sbb '
IS_MOV  DB 'MOV ','$'
IS_XOR  DB 'xor '
IS_AND  DB 'and '
IS_OR   DB 'or '
IS_NOP  DB 'nop '
IS_SHR  DB 'shr '
IS_SHL  DB 'shl '
IS_SAR  DB 'sar '
IS_CLC  DB 'clc '
IS_ROR  DB 'ror ' 
IS_ROL  DB 'rol '
IS_RCL  DB 'rcl '
IS_RCR  DB 'rcr '
IS_INC  DB 'inc '
IS_DEC  DB 'dec '


;============REGISTERS===========
IS_AX   DB 'ax'
IS_AL   DB 'al'
IS_AH   DB 'ah'
IS_BX   DB 'bx'
IS_BL   DB 'bl'
IS_BH   DB 'bh'
IS_CX   DB 'cx'
IS_CL   DB 'cl'
IS_CH   DB 'ch'
IS_DX   DB 'dx'
IS_DL   DB 'dl'
IS_DH   DB 'dh'
IS_SI   DB 'si'
IS_DI   DB 'di'
IS_SP   DB 'sp'
IS_BP   DB 'bp'

;============REGISTER INDIRECT===========
_IS_NOT_REG DB '['
_IS_BX_ DB '[bx]'
_IS_SI_ DB '[si]'
_IS_DI_ DB '[di]'

;============BASED RELATIVE===========
;; NEED TO COMPLETE ANTHER COMPINATIONS
_BX_DISP DB '[bx]+'
_BP_DISP DB '[bp]+'

;============INDEXED RELATIVE===========
;; NEED TO COMPLETE ANTHER COMPINATIONS
_SI_DISP DB '[si]+'
_DI_DISP DB '[di]+'

;============INDEXED RELATIVE===========
;; NEED TO COMPLETE ANTHER COMPINATIONS
_BX_SI_ DB '[bx][si]'
_BX_DI_ DB '[bx][di]'
_BP_SI_ DB '[bp][si]'
_BP_DI_ DB '[bp][di]'


;============ALI'S_REGISTERS===========
ALI_AX   DW 0000H
ALI_AL   DB 00H
ALI_AH   DB 00H
ALI_BX   DW 0000H
ALI_BL   DB 00H
ALI_BH   DB 00H
ALI_CX   DW 0000H
ALI_CL   DB 00H
ALI_CH   DB 00H
ALI_DX   DW 0000H
ALI_DL   DB 00H
ALI_DH   DB 00H
ALI_SI   DW 0000H
ALI_DI   DW 0000H
ALI_SP   DW 0000H
ALI_BP   DW 0000H

;============ALI'S_MEMMORY===========
ALI_PYTE_0 DB 00H
ALI_PYTE_1 DB 00H
ALI_PYTE_2 DB 00H
ALI_PYTE_3 DB 00H
ALI_PYTE_4 DB 00H
ALI_PYTE_5 DB 00H
ALI_PYTE_6 DB 00H
ALI_PYTE_7 DB 00H
ALI_PYTE_8 DB 00H
ALI_PYTE_9 DB 00H
ALI_PYTE_A DB 00H
ALI_PYTE_B DB 00H
ALI_PYTE_C DB 00H
ALI_PYTE_D DB 00H
ALI_PYTE_E DB 00H
ALI_PYTE_F DB 00H

;============AHMED'S_REGISTERS===========
AHMED_AX   DW 0000H
AHMED_AL   DB 00H
AHMED_AH   DB 00H
AHMED_BX   DW 0000H
AHMED_BL   DB 00H
AHMED_BH   DB 00H
AHMED_CX   DW 0000H
AHMED_CL   DB 00H
AHMED_CH   DB 00H
AHMED_DX   DW 0000H
AHMED_DL   DB 00H
AHMED_DH   DB 00H
AHMED_SI   DW 0000H
AHMED_DI   DW 0000H
AHMED_SP   DW 0000H
AHMED_BP   DW 0000H

;============AHMED'S_MEMMORY===========
AHMED_PYTE_0 DB 00H
AHMED_PYTE_1 DB 00H
AHMED_PYTE_2 DB 00H
AHMED_PYTE_3 DB 00H
AHMED_PYTE_4 DB 00H
AHMED_PYTE_5 DB 00H
AHMED_PYTE_6 DB 00H
AHMED_PYTE_7 DB 00H
AHMED_PYTE_8 DB 00H
AHMED_PYTE_9 DB 00H
AHMED_PYTE_A DB 00H
AHMED_PYTE_B DB 00H
AHMED_PYTE_C DB 00H
AHMED_PYTE_D DB 00H
AHMED_PYTE_E DB 00H
AHMED_PYTE_F DB 00H





;================================
;============CODE================
;================================
.CODE 
MAIN PROC FAR
    ;DEFINE DATA SEGMENT
    MOV AX,@DATA
    MOV DS,AX
    MOV ES,AX

    ;CLEAR SCREEN
    CLEAR_SCREEN

    SET_VIDEO_MODE 19

    ;DISPLAY MESS
    DISPLAY_MESSAGE MESS1,1,0,0

    ;READ COMMAND
    READ_MESSAGE COMMAND_BUFFER,1,1,0

    MOV AL,COMMAND_BUFFER_INSTRUCTION

    DISPLAY_MESSAGE COMMAND_BUFFER_INSTRUCTION,1,2,0

    

    CLD
    MOV DI,OFFSET COMMAND_BUFFER_INSTRUCTION
    MOV CX,0
    MOV CL,COMMAND_BUFFER_ACTUAL_SIZE
    MOV AL,','
    REPNE SCASB

    
    ;GET THE COMMAND
    ; 1-IS IT ADD?
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_ADD,4
    JE IT_ADD
    ; IS IT ADC
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_ADC,4
    JE IT_ADC
    ; 2-IS IT SUB 
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_SUB,3
    JE IT_SUB
    ; 3-IS IT SBB
    ;; NOT NEEDED
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_SBB,3
    JE IT_SBB
    ; 4-IS IT MOV
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_MOV,3
    JE IT_MOV
    ; 5-IS IT XOR
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_XOR,3
    JE IT_XOR
    ; 6-IS IT AND 
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_AND,3
    JE IT_AND
    ; 7-IS IT OR 
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_OR,3
    JE IT_OR
    ; 8-IS IT NOP
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_NOP,3
    JE IT_NOP
    ; 9-IS IT SHR
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_SHR,3
    JE IT_SHR
    ; 10-IS IT SHR
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_SHL,3
    JE IT_SHL
    ; 11-IS IT SAR
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_SAR,3
    JE IT_ADD
    ; 12-IS IT CLC
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_CLC,3
    JE IT_CLC
    ; 13-IS IT ROR
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_ROR,3
    JE IT_ROR
    ; 14-IS IT RCL
    ;;NOT NEEDED
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_RCL,3
    JE IT_RCL
    ; 15-IS IT RCR
    ;; NOT NEEDED
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_RCR,3
    JE IT_RCR
    ; 16-IS IT ROL
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_ROL,3
    JE IT_ROL
    ; 17-IS IT ROR
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_ROR,3
    JE IT_ROR 
    ; 18-IS IT INC
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_INC,3
    JE IT_INC
    ; 19-IS IT DEC
    COMPARE_STRINGS COMMAND_BUFFER_INSTRUCTION,IS_DEC,3
    JE IT_DEC

    IT_ADD:
        COMPARE_STRINGS COMMAND_BUFFER_DEST,_IS_NOT_REG,1
        JE NOT_REG
        COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_AX
        COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_BX
        COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_CX
        COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_DX
        COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI
                COMPARE_STRINGS COMMAND_BUFFER_DEST,IS_AX,2
        JE DEST_IS_SI

    IT_ADC:
    IT_SUB:
    IT_SBB:
    IT_MOV:
    IT_XOR:
    IT_AND:
    IT_OR:
    IT_NOP:
    IT_SHR:
    IT_SHL:
    IT_SAR:
    IT_CLC:
    IT_ROR:
    IT_RCL:
    IT_RCR:
    IT_ROL:
    IT_INC:
    IT_DEC:
    


    

    





    

    ;STOP PROGRAMM
    MOV  AH,4CH
    INT  21H

MAIN ENDP
    END MAIN
